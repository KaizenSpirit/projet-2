{
    "[html]": {
        "editor.tabSize": 4
    },
    "editor.detectIndentation": false
}


// "[html]": {"editor.tabSize": 4} : Cette ligne spécifie que la taille de tabulation pour les fichiers HTML doit être de 4 espaces. Cela signifie que chaque fois que vous appuyez sur la touche Tab ou que vous formatez automatiquement le code dans un fichier HTML, VS Code insérera 4 espaces à la place de la tabulation. C'est utile pour s'assurer que le code HTML est formaté de manière uniforme selon une convention spécifique de taille de tabulation.

// "editor.detectIndentation": false : Ce paramètre désactive la détection automatique de l'indentation par VS Code. Normalement, VS Code tente de détecter automatiquement si un fichier utilise des espaces ou des tabulations pour l'indentation, ainsi que la taille de l'indentation. En désactivant cette fonctionnalité (false), vous forcez VS Code à utiliser les paramètres d'indentation spécifiés dans votre fichier .vscode (ou d'autres paramètres globaux définis ailleurs) au lieu d'essayer de deviner la convention d'indentation basée sur le contenu du fichier.

// L'utilisation de ce fichier .vscode dans un projet frontend assure que tous ceux qui travaillent sur le projet ont la même configuration de base pour l'éditeur, ce qui aide à maintenir un style de code cohérent et à réduire les chances d'introduire des différences de formatage simplement parce que différents développeurs ont des configurations d'éditeur différentes.



// En ce qui concerne les liens de la page index.html dans la balise head
// Preconnect à Google Fonts:
// <link rel="preconnect" href="https://fonts.googleapis.com">
// <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

// Ces deux premiers liens utilisent l'attribut rel="preconnect" pour établir une connexion préalable avec les origines spécifiées (fonts.googleapis.com et fonts.gstatic.com). L'objectif est d'informer le navigateur qu'il va bientôt avoir besoin de ressources provenant de ces domaines. Cela permet au navigateur d'établir à l'avance les connexions nécessaires (DNS, TCP, et éventuellement TLS) avant de demander réellement les ressources. Cela peut réduire la latence avant le téléchargement des ressources, rendant le chargement des polices plus rapide. L'attribut crossorigin est utilisé pour des raisons de sécurité et de performance lors du chargement des ressources CORS (Cross-Origin Resource Sharing).

// Chargement de la police Google Fonts:
// <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;700&display=swap" rel="stylesheet">

// Ce lien importe la police Raleway depuis Google Fonts avec les poids de 400, 500, et 700. L'attribut display=swap indique au navigateur de remplacer temporairement la police par une police système standard jusqu'à ce que la police web soit téléchargée, ce qui peut aider à améliorer la vitesse de chargement de la page en évitant de bloquer le rendu du texte.

// Font Awesome:
// <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w==" crossorigin="anonymous" referrerpolicy="no-referrer" />

// Ce lien charge la bibliothèque Font Awesome à partir de CDNJS, qui est une collection populaire d'icônes et d'outils de style pour le web. L'attribut integrity sert à s'assurer que la ressource chargée n'a pas été altérée, en fournissant une empreinte cryptographique pour la vérification. L'attribut crossorigin="anonymous" est encore une fois utilisé pour le chargement sécurisé des ressources CORS, et referrerpolicy="no-referrer" est utilisé pour contrôler l'envoi des informations de l'émetteur lors de la demande de la ressource.

//En résumé, ces liens servent à améliorer les performances et la sécurité lors du chargement de polices et d'icônes depuis des services externes, tout en intégrant ces ressources de manière efficace et sûre dans votre projet web.